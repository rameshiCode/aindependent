// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginLoginForAccessToken = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type GoogleAuthRequest = {
  code: string
  codeVerifier: string
  platform: string
}

export type HttpValidationError = {
  detail?: Array<ValidationError>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type LoginAuthGoogleData = {
  body: GoogleAuthRequest
  path?: never
  query?: never
  url: "/api/v1/login/auth/google"
}

export type LoginAuthGoogleErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginAuthGoogleError =
  LoginAuthGoogleErrors[keyof LoginAuthGoogleErrors]

export type LoginAuthGoogleResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type LoginAuthGoogleResponse =
  LoginAuthGoogleResponses[keyof LoginAuthGoogleResponses]

export type LoginLoginGoogle1Data = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/login/google1"
}

export type LoginLoginGoogle1Responses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type LoginAuthGoogle1Data = {
  body?: never
  path?: never
  query: {
    code: string
  }
  url: "/api/v1/login/auth/google1"
}

export type LoginAuthGoogle1Errors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginAuthGoogle1Error =
  LoginAuthGoogle1Errors[keyof LoginAuthGoogle1Errors]

export type LoginAuthGoogle1Responses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type LoginLoginForAccessTokenData = {
  body: BodyLoginLoginForAccessToken
  path?: never
  query?: never
  url: "/api/v1/login/access-token"
}

export type LoginLoginForAccessTokenErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginLoginForAccessTokenError =
  LoginLoginForAccessTokenErrors[keyof LoginLoginForAccessTokenErrors]

export type LoginLoginForAccessTokenResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type LoginLoginForAccessTokenResponse =
  LoginLoginForAccessTokenResponses[keyof LoginLoginForAccessTokenResponses]

export type LoginTestTokenData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/login/test-token"
}

export type LoginTestTokenResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type LoginTestTokenResponse =
  LoginTestTokenResponses[keyof LoginTestTokenResponses]

export type LoginRecoverPasswordData = {
  body?: never
  path: {
    email: string
  }
  query?: never
  url: "/api/v1/password-recovery/{email}"
}

export type LoginRecoverPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginRecoverPasswordError =
  LoginRecoverPasswordErrors[keyof LoginRecoverPasswordErrors]

export type LoginRecoverPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type LoginRecoverPasswordResponse =
  LoginRecoverPasswordResponses[keyof LoginRecoverPasswordResponses]

export type LoginResetPasswordData = {
  body: NewPassword
  path?: never
  query?: never
  url: "/api/v1/reset-password/"
}

export type LoginResetPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginResetPasswordError =
  LoginResetPasswordErrors[keyof LoginResetPasswordErrors]

export type LoginResetPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type LoginResetPasswordResponse =
  LoginResetPasswordResponses[keyof LoginResetPasswordResponses]

export type LoginRecoverPasswordHtmlContentData = {
  body?: never
  path: {
    email: string
  }
  query?: never
  url: "/api/v1/password-recovery-html-content/{email}"
}

export type LoginRecoverPasswordHtmlContentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginRecoverPasswordHtmlContentError =
  LoginRecoverPasswordHtmlContentErrors[keyof LoginRecoverPasswordHtmlContentErrors]

export type LoginRecoverPasswordHtmlContentResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type LoginRecoverPasswordHtmlContentResponse =
  LoginRecoverPasswordHtmlContentResponses[keyof LoginRecoverPasswordHtmlContentResponses]

export type UsersReadUsersData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
  }
  url: "/api/v1/users/"
}

export type UsersReadUsersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUsersError =
  UsersReadUsersErrors[keyof UsersReadUsersErrors]

export type UsersReadUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersPublic
}

export type UsersReadUsersResponse =
  UsersReadUsersResponses[keyof UsersReadUsersResponses]

export type UsersCreateUserData = {
  body: UserCreate
  path?: never
  query?: never
  url: "/api/v1/users/"
}

export type UsersCreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersCreateUserError =
  UsersCreateUserErrors[keyof UsersCreateUserErrors]

export type UsersCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersCreateUserResponse =
  UsersCreateUserResponses[keyof UsersCreateUserResponses]

export type UsersDeleteUserMeData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UsersDeleteUserMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserMeResponse =
  UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses]

export type UsersReadUserMeData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UsersReadUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserMeResponse =
  UsersReadUserMeResponses[keyof UsersReadUserMeResponses]

export type UsersUpdateUserMeData = {
  body: UserUpdateMe
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UsersUpdateUserMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserMeError =
  UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors]

export type UsersUpdateUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserMeResponse =
  UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses]

export type UsersUpdatePasswordMeData = {
  body: UpdatePassword
  path?: never
  query?: never
  url: "/api/v1/users/me/password"
}

export type UsersUpdatePasswordMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdatePasswordMeError =
  UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors]

export type UsersUpdatePasswordMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersUpdatePasswordMeResponse =
  UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses]

export type UsersRegisterUserData = {
  body: UserRegister
  path?: never
  query?: never
  url: "/api/v1/users/signup"
}

export type UsersRegisterUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersRegisterUserError =
  UsersRegisterUserErrors[keyof UsersRegisterUserErrors]

export type UsersRegisterUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersRegisterUserResponse =
  UsersRegisterUserResponses[keyof UsersRegisterUserResponses]

export type UsersDeleteUserData = {
  body?: never
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UsersDeleteUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersDeleteUserError =
  UsersDeleteUserErrors[keyof UsersDeleteUserErrors]

export type UsersDeleteUserResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserResponse =
  UsersDeleteUserResponses[keyof UsersDeleteUserResponses]

export type UsersReadUserByIdData = {
  body?: never
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UsersReadUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUserByIdError =
  UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors]

export type UsersReadUserByIdResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserByIdResponse =
  UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses]

export type UsersUpdateUserData = {
  body: UserUpdate
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UsersUpdateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserError =
  UsersUpdateUserErrors[keyof UsersUpdateUserErrors]

export type UsersUpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserResponse =
  UsersUpdateUserResponses[keyof UsersUpdateUserResponses]

export type UtilsTestEmailData = {
  body?: never
  path?: never
  query: {
    email_to: string
  }
  url: "/api/v1/utils/test-email/"
}

export type UtilsTestEmailErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UtilsTestEmailError =
  UtilsTestEmailErrors[keyof UtilsTestEmailErrors]

export type UtilsTestEmailResponses = {
  /**
   * Successful Response
   */
  201: Message
}

export type UtilsTestEmailResponse =
  UtilsTestEmailResponses[keyof UtilsTestEmailResponses]

export type UtilsHealthCheckData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/utils/health-check/"
}

export type UtilsHealthCheckResponses = {
  /**
   * Successful Response
   */
  200: boolean
}

export type UtilsHealthCheckResponse =
  UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses]

export type StripeStripeWebhookData = {
  body?: never
  headers?: {
    "stripe-signature"?: string
  }
  path?: never
  query?: never
  url: "/api/v1/stripe/webhook"
}

export type StripeStripeWebhookErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type StripeStripeWebhookError =
  StripeStripeWebhookErrors[keyof StripeStripeWebhookErrors]

export type StripeStripeWebhookResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeStripeWebhookResponse =
  StripeStripeWebhookResponses[keyof StripeStripeWebhookResponses]

export type StripeStripeHealthCheckData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/stripe/health-check"
}

export type StripeStripeHealthCheckResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type StripeGetSubscriptionStatusData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/stripe/subscription-status"
}

export type StripeGetSubscriptionStatusResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeGetSubscriptionStatusResponse =
  StripeGetSubscriptionStatusResponses[keyof StripeGetSubscriptionStatusResponses]

export type StripeCreateCheckoutSessionData = {
  body: CheckoutSessionCreate
  path?: never
  query?: never
  url: "/api/v1/stripe/create-checkout-session"
}

export type StripeCreateCheckoutSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type StripeCreateCheckoutSessionError =
  StripeCreateCheckoutSessionErrors[keyof StripeCreateCheckoutSessionErrors]

export type StripeCreateCheckoutSessionResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeCreateCheckoutSessionResponse =
  StripeCreateCheckoutSessionResponses[keyof StripeCreateCheckoutSessionResponses]

export type StripeCreatePortalSessionData = {
  body?: never
  path?: never
  query: {
    return_url: string
  }
  url: "/api/v1/stripe/create-portal-session"
}

export type StripeCreatePortalSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type StripeCreatePortalSessionError =
  StripeCreatePortalSessionErrors[keyof StripeCreatePortalSessionErrors]

export type StripeCreatePortalSessionResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeCreatePortalSessionResponse =
  StripeCreatePortalSessionResponses[keyof StripeCreatePortalSessionResponses]

export type StripeGetUsageStatusData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/stripe/usage-status"
}

export type StripeGetUsageStatusResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeGetUsageStatusResponse =
  StripeGetUsageStatusResponses[keyof StripeGetUsageStatusResponses]

export type StripeIncrementUsageData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/stripe/increment-usage"
}

export type StripeIncrementUsageResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeIncrementUsageResponse =
  StripeIncrementUsageResponses[keyof StripeIncrementUsageResponses]

export type StripeGetAllSubscriptionsData = {
  body?: never
  path?: never
  query?: {
    limit?: number
    starting_after?: string | null
  }
  url: "/api/v1/stripe/admin/subscriptions"
}

export type StripeGetAllSubscriptionsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type StripeGetAllSubscriptionsError =
  StripeGetAllSubscriptionsErrors[keyof StripeGetAllSubscriptionsErrors]

export type StripeGetAllSubscriptionsResponses = {
  /**
   * Successful Response
   */
  200: Array<{
    [key: string]: unknown
  }>
}

export type StripeGetAllSubscriptionsResponse =
  StripeGetAllSubscriptionsResponses[keyof StripeGetAllSubscriptionsResponses]

export type StripeCreateSubscriptionWithPaymentMethodData = {
  body: {
    [key: string]: unknown
  }
  path?: never
  query?: never
  url: "/api/v1/stripe/create-subscription-with-payment-method"
}

export type StripeCreateSubscriptionWithPaymentMethodErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type StripeCreateSubscriptionWithPaymentMethodError =
  StripeCreateSubscriptionWithPaymentMethodErrors[keyof StripeCreateSubscriptionWithPaymentMethodErrors]

export type StripeCreateSubscriptionWithPaymentMethodResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeCreateSubscriptionWithPaymentMethodResponse =
  StripeCreateSubscriptionWithPaymentMethodResponses[keyof StripeCreateSubscriptionWithPaymentMethodResponses]

export type StripeCancelSubscriptionData = {
  body?: never
  path: {
    subscription_id: string
  }
  query?: never
  url: "/api/v1/stripe/cancel-subscription/{subscription_id}"
}

export type StripeCancelSubscriptionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type StripeCancelSubscriptionError =
  StripeCancelSubscriptionErrors[keyof StripeCancelSubscriptionErrors]

export type StripeCancelSubscriptionResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type StripeCancelSubscriptionResponse =
  StripeCancelSubscriptionResponses[keyof StripeCancelSubscriptionResponses]

export type StripeListPaymentMethodsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/stripe/payment-methods"
}

export type StripeListPaymentMethodsResponses = {
  /**
   * Successful Response
   */
  200: Array<{
    [key: string]: unknown
  }>
}

export type StripeListPaymentMethodsResponse =
  StripeListPaymentMethodsResponses[keyof StripeListPaymentMethodsResponses]

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {})
}
