// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  LoginService,
  UsersService,
  UtilsService,
  DefaultService,
} from "../sdk.gen"
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query"
import type {
  LoginLoginGoogleData,
  LoginAuthGoogleData,
  LoginLoginForAccessTokenData,
  LoginLoginForAccessTokenError,
  LoginLoginForAccessTokenResponse,
  LoginTestTokenData,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordError,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordError,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentError,
  LoginRecoverPasswordHtmlContentResponse,
  UsersReadUsersData,
  UsersCreateUserData,
  UsersCreateUserError,
  UsersCreateUserResponse,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponse,
  UsersReadUserMeData,
  UsersUpdateUserMeData,
  UsersUpdateUserMeError,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeError,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserError,
  UsersRegisterUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersUpdateUserData,
  UsersUpdateUserError,
  UsersUpdateUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailError,
  UtilsTestEmailResponse,
  UtilsHealthCheckData,
  ApiStripeHealthCheckData,
  ApiGetSubscriptionStatusData,
  ApiCreateCheckoutSessionData,
  ApiCreateCheckoutSessionError,
  ApiCreateCheckoutSessionResponse,
  ApiGetProductsData,
  ApiGetMySubscriptionsData,
  ApiCreatePortalSessionData,
  ApiCreatePortalSessionError,
  ApiCreatePortalSessionResponse,
  ApiGetUsageStatusData,
  ApiIncrementUsageData,
  ApiIncrementUsageResponse,
} from "../types.gen"
import { client as _heyApiClient } from "../client.gen"

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const loginGoogleQueryKey = (options?: Options<LoginLoginGoogleData>) =>
  createQueryKey("loginLoginGoogle", options)

export const loginGoogleOptions = (options?: Options<LoginLoginGoogleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.loginGoogle({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginGoogleQueryKey(options),
  })
}

export const authGoogleQueryKey = (options: Options<LoginAuthGoogleData>) =>
  createQueryKey("loginAuthGoogle", options)

export const authGoogleOptions = (options: Options<LoginAuthGoogleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.authGoogle({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authGoogleQueryKey(options),
  })
}

export const loginForAccessTokenQueryKey = (
  options: Options<LoginLoginForAccessTokenData>,
) => createQueryKey("loginLoginForAccessToken", options)

export const loginForAccessTokenOptions = (
  options: Options<LoginLoginForAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.loginForAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginForAccessTokenQueryKey(options),
  })
}

export const loginForAccessTokenMutation = (
  options?: Partial<Options<LoginLoginForAccessTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginLoginForAccessTokenResponse,
    LoginLoginForAccessTokenError,
    Options<LoginLoginForAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.loginForAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const testTokenQueryKey = (options?: Options<LoginTestTokenData>) =>
  createQueryKey("loginTestToken", options)

export const testTokenOptions = (options?: Options<LoginTestTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.testToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testTokenQueryKey(options),
  })
}

export const testTokenMutation = (
  options?: Partial<Options<LoginTestTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginTestTokenResponse,
    DefaultError,
    Options<LoginTestTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.testToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const recoverPasswordQueryKey = (
  options: Options<LoginRecoverPasswordData>,
) => createQueryKey("loginRecoverPassword", options)

export const recoverPasswordOptions = (
  options: Options<LoginRecoverPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.recoverPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: recoverPasswordQueryKey(options),
  })
}

export const recoverPasswordMutation = (
  options?: Partial<Options<LoginRecoverPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginRecoverPasswordResponse,
    LoginRecoverPasswordError,
    Options<LoginRecoverPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.recoverPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const resetPasswordQueryKey = (
  options: Options<LoginResetPasswordData>,
) => createQueryKey("loginResetPassword", options)

export const resetPasswordOptions = (
  options: Options<LoginResetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: resetPasswordQueryKey(options),
  })
}

export const resetPasswordMutation = (
  options?: Partial<Options<LoginResetPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginResetPasswordResponse,
    LoginResetPasswordError,
    Options<LoginResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const recoverPasswordHtmlContentQueryKey = (
  options: Options<LoginRecoverPasswordHtmlContentData>,
) => createQueryKey("loginRecoverPasswordHtmlContent", options)

export const recoverPasswordHtmlContentOptions = (
  options: Options<LoginRecoverPasswordHtmlContentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LoginService.recoverPasswordHtmlContent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: recoverPasswordHtmlContentQueryKey(options),
  })
}

export const recoverPasswordHtmlContentMutation = (
  options?: Partial<Options<LoginRecoverPasswordHtmlContentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginRecoverPasswordHtmlContentResponse,
    LoginRecoverPasswordHtmlContentError,
    Options<LoginRecoverPasswordHtmlContentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LoginService.recoverPasswordHtmlContent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUsersQueryKey = (options?: Options<UsersReadUsersData>) =>
  createQueryKey("usersReadUsers", options)

export const readUsersOptions = (options?: Options<UsersReadUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.readUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUsersQueryKey(options),
  })
}

export const createUserQueryKey = (options: Options<UsersCreateUserData>) =>
  createQueryKey("usersCreateUser", options)

export const createUserOptions = (options: Options<UsersCreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createUserQueryKey(options),
  })
}

export const createUserMutation = (
  options?: Partial<Options<UsersCreateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersCreateUserResponse,
    UsersCreateUserError,
    Options<UsersCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteUserMeMutation = (
  options?: Partial<Options<UsersDeleteUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersDeleteUserMeResponse,
    DefaultError,
    Options<UsersDeleteUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.deleteUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUserMeQueryKey = (options?: Options<UsersReadUserMeData>) =>
  createQueryKey("usersReadUserMe", options)

export const readUserMeOptions = (options?: Options<UsersReadUserMeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.readUserMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUserMeQueryKey(options),
  })
}

export const updateUserMeMutation = (
  options?: Partial<Options<UsersUpdateUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdateUserMeResponse,
    UsersUpdateUserMeError,
    Options<UsersUpdateUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.updateUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updatePasswordMeMutation = (
  options?: Partial<Options<UsersUpdatePasswordMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdatePasswordMeResponse,
    UsersUpdatePasswordMeError,
    Options<UsersUpdatePasswordMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.updatePasswordMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const registerUserQueryKey = (options: Options<UsersRegisterUserData>) =>
  createQueryKey("usersRegisterUser", options)

export const registerUserOptions = (
  options: Options<UsersRegisterUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.registerUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: registerUserQueryKey(options),
  })
}

export const registerUserMutation = (
  options?: Partial<Options<UsersRegisterUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersRegisterUserResponse,
    UsersRegisterUserError,
    Options<UsersRegisterUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.registerUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteUserMutation = (
  options?: Partial<Options<UsersDeleteUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    Options<UsersDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.deleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUserByIdQueryKey = (options: Options<UsersReadUserByIdData>) =>
  createQueryKey("usersReadUserById", options)

export const readUserByIdOptions = (
  options: Options<UsersReadUserByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UsersService.readUserById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUserByIdQueryKey(options),
  })
}

export const updateUserMutation = (
  options?: Partial<Options<UsersUpdateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdateUserResponse,
    UsersUpdateUserError,
    Options<UsersUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UsersService.updateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const testEmailQueryKey = (options: Options<UtilsTestEmailData>) =>
  createQueryKey("utilsTestEmail", options)

export const testEmailOptions = (options: Options<UtilsTestEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UtilsService.testEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testEmailQueryKey(options),
  })
}

export const testEmailMutation = (
  options?: Partial<Options<UtilsTestEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UtilsTestEmailResponse,
    UtilsTestEmailError,
    Options<UtilsTestEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await UtilsService.testEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const healthCheckQueryKey = (options?: Options<UtilsHealthCheckData>) =>
  createQueryKey("utilsHealthCheck", options)

export const healthCheckOptions = (options?: Options<UtilsHealthCheckData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await UtilsService.healthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: healthCheckQueryKey(options),
  })
}

export const apiStripeHealthCheckQueryKey = (
  options?: Options<ApiStripeHealthCheckData>,
) => createQueryKey("apiStripeHealthCheck", options)

export const apiStripeHealthCheckOptions = (
  options?: Options<ApiStripeHealthCheckData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiStripeHealthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiStripeHealthCheckQueryKey(options),
  })
}

export const apiGetSubscriptionStatusQueryKey = (
  options?: Options<ApiGetSubscriptionStatusData>,
) => createQueryKey("apiGetSubscriptionStatus", options)

export const apiGetSubscriptionStatusOptions = (
  options?: Options<ApiGetSubscriptionStatusData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiGetSubscriptionStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiGetSubscriptionStatusQueryKey(options),
  })
}

export const apiCreateCheckoutSessionQueryKey = (
  options: Options<ApiCreateCheckoutSessionData>,
) => createQueryKey("apiCreateCheckoutSession", options)

export const apiCreateCheckoutSessionOptions = (
  options: Options<ApiCreateCheckoutSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiCreateCheckoutSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiCreateCheckoutSessionQueryKey(options),
  })
}

export const apiCreateCheckoutSessionMutation = (
  options?: Partial<Options<ApiCreateCheckoutSessionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiCreateCheckoutSessionResponse,
    ApiCreateCheckoutSessionError,
    Options<ApiCreateCheckoutSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DefaultService.apiCreateCheckoutSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const apiGetProductsQueryKey = (options?: Options<ApiGetProductsData>) =>
  createQueryKey("apiGetProducts", options)

export const apiGetProductsOptions = (
  options?: Options<ApiGetProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiGetProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiGetProductsQueryKey(options),
  })
}

export const apiGetMySubscriptionsQueryKey = (
  options?: Options<ApiGetMySubscriptionsData>,
) => createQueryKey("apiGetMySubscriptions", options)

export const apiGetMySubscriptionsOptions = (
  options?: Options<ApiGetMySubscriptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiGetMySubscriptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiGetMySubscriptionsQueryKey(options),
  })
}

export const apiCreatePortalSessionQueryKey = (
  options: Options<ApiCreatePortalSessionData>,
) => createQueryKey("apiCreatePortalSession", options)

export const apiCreatePortalSessionOptions = (
  options: Options<ApiCreatePortalSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiCreatePortalSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiCreatePortalSessionQueryKey(options),
  })
}

export const apiCreatePortalSessionMutation = (
  options?: Partial<Options<ApiCreatePortalSessionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiCreatePortalSessionResponse,
    ApiCreatePortalSessionError,
    Options<ApiCreatePortalSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DefaultService.apiCreatePortalSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const apiGetUsageStatusQueryKey = (
  options?: Options<ApiGetUsageStatusData>,
) => createQueryKey("apiGetUsageStatus", options)

export const apiGetUsageStatusOptions = (
  options?: Options<ApiGetUsageStatusData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiGetUsageStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiGetUsageStatusQueryKey(options),
  })
}

export const apiIncrementUsageQueryKey = (
  options?: Options<ApiIncrementUsageData>,
) => createQueryKey("apiIncrementUsage", options)

export const apiIncrementUsageOptions = (
  options?: Options<ApiIncrementUsageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.apiIncrementUsage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: apiIncrementUsageQueryKey(options),
  })
}

export const apiIncrementUsageMutation = (
  options?: Partial<Options<ApiIncrementUsageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiIncrementUsageResponse,
    DefaultError,
    Options<ApiIncrementUsageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DefaultService.apiIncrementUsage({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
